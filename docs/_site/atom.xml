<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>The blog of Iain C Docherty</title>
 <link href="http://spacebotwar.com:4000/atom.xml" rel="self"/>
 <link href="http://spacebotwar.com:4000"/>
 <updated>2014-01-12T12:54:12+00:00</updated>
 <id>http://spacebotwar.com:4000</id>
 <author>
   <name>Iain C Docherty</name>
   <email>spacebotwar@iain-docherty.com</email>
 </author>

 
 <entry>
   <title>Testing Fleet Programs</title>
   <link href="http://spacebotwar.com:4000/blog/2014/01/10/testing.html"/>
   <updated>2014-01-10T00:00:00+00:00</updated>
   <id>http://spacebotwar.com:4000/blog/2014/01/10/testing</id>
   <content type="html">&lt;p&gt;I have given some thought lately to how fleet action programs will be written, and in particular how they will be tested.&lt;/p&gt;

&lt;p&gt;The basic principle that I have described elsewhere, is that every 500ms the current state of the two competing fleets will be made available to both programs. This will give the last known speed, direction and orientation of each ship and each missile.&lt;/p&gt;

&lt;p&gt;Using this information, each program will attempt to avoid incoming missiles, position them to attack the enemy or to avoid the enemy. Full information to that point in time is known, so the winning program will be based on the skill of the programmer.&lt;/p&gt;

&lt;p&gt;As I said, every 500ms the information about every ship and missile will be given and each program should give course corrections based on the information. This information will apply for the coming 500ms.&lt;/p&gt;

&lt;p&gt;When a new program is ready for testing (be it a brand new program, or a modification of an existing one) the programmer will submit it for approval. This will involve several steps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Does it compile without errors?&lt;/li&gt;

&lt;li&gt;Does it run and complete in a reasonable time (less than 300ms)?&lt;/li&gt;

&lt;li&gt;Does it produce valid output for a static opponent?&lt;/li&gt;

&lt;li&gt;Does it produce valid output for a dynamic (but dumb) opponent?&lt;/li&gt;

&lt;li&gt;And perhaps other more complex tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If it is accepted for approval then it can be entered into one of several tournaments.&lt;/p&gt;

&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;/h2&gt;

&lt;p&gt;Even if a program passes the basic sanity tests, it still may not work as expected.&lt;/p&gt;

&lt;p&gt;I anticipate there being various methods to test a program.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single stepping.&lt;/li&gt;

&lt;li&gt;Run time logging.&lt;/li&gt;

&lt;li&gt;Running from a snapshot&lt;/li&gt;

&lt;li&gt;Playback&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;single_stepping&quot;&gt;Single Stepping&lt;/h3&gt;

&lt;p&gt;By a ‘single step’ I mean that given all the data for a 500ms tick, the program can be run to produce the output for that tick, and then halt. By this means you can compare the input and the output for that one step.&lt;/p&gt;

&lt;p&gt;If you wish the program can then be run for the next 500ms period and the input and output compared again, for as many ticks as you wish.&lt;/p&gt;

&lt;p&gt;Don’t confuse this with the ‘single step’ of a Perl program, I don’t see how this could be done to single step through individual instructions (but I won’t rule it out!)&lt;/p&gt;

&lt;h3 id=&quot;run_time_logging&quot;&gt;Run time logging.&lt;/h3&gt;

&lt;p&gt;With your own program, you can write to a log file. For example to log the current state of variables in your program. The log file can then be read to see how your program performed. This is just like logging by inserting print statements.&lt;/p&gt;

&lt;h3 id=&quot;running_from_a_snapshot&quot;&gt;Running from a snapshot&lt;/h3&gt;

&lt;p&gt;It should also be possible to replay previous games and when an interesting position is seen a ‘snapshot’ of the current position can be made. These snapshots can be used to set up an initial position for your own fleet (and chosen opponent) to see how well your program copes in that position.&lt;/p&gt;

&lt;h3 id=&quot;playback&quot;&gt;Playback&lt;/h3&gt;

&lt;p&gt;Every match between two fleets will be recorded. How long these recordings will be kept for will remain to be seen (it will ultimately depend upon storage requirements).&lt;/p&gt;

&lt;p&gt;These recordings will retain the positions, and the instructions given, for each fleet for each 500ms period. This will allow an accurate play-back of the actual match, either in real-time, or slow or fast motion, or single step. The instructions issued by the two fleets can be examined and (if it is your own fleet) you should be able to change the program and proceed from a snapshot of the recording to see how your changes affect your program.&lt;/p&gt;

&lt;h2 id=&quot;special_tournaments&quot;&gt;Special tournaments&lt;/h2&gt;

&lt;p&gt;The option of running from a snapshot opens up a number of intriguing possibilities.&lt;/p&gt;

&lt;p&gt;For example, certain scenarios could be set up. A single ship of your own surrounded by a fleet of four others. Your task is to write a program that will succeed against this enemy. A whole set of this type of tournament could be made with prizes or awards made to the first program to win in this situation.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Separation of Concerns</title>
   <link href="http://spacebotwar.com:4000/blog/2013/12/26/separation-of-concerns.html"/>
   <updated>2013-12-26T00:00:00+00:00</updated>
   <id>http://spacebotwar.com:4000/blog/2013/12/26/separation-of-concerns</id>
   <content type="html">&lt;p&gt;Learning about the Javascript framework &lt;a href=&quot;http://backbonejs.org&quot;&gt;Backbone&lt;/a&gt; has been a timeconsuming process, but I think it is worthwhile especially when embarking on a potentially large javascript application (like SpaceBotWar).&lt;/p&gt;

&lt;p&gt;One problem I have encountered many times in the past is convoluted code which has many diverse tasks. e.g. code which captures user input, sends data to the server, waits for the response, renders the html output, all mixed in together.&lt;/p&gt;

&lt;p&gt;Backbone solves this problem elegantly but it requires a bit of thought, this example shows how I tackled the thorny issue of how to log in and out :)&lt;/p&gt;

&lt;p&gt;Using the Model View Controller design pattern we can create a Model that just models the status of the user.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;c1&#39;&gt;// app/models/login_status.js&lt;/span&gt;

&lt;span class=&#39;nx&#39;&gt;define&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;([&lt;/span&gt;    &lt;span class=&#39;s2&#39;&gt;&amp;quot;jquery&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;   &lt;span class=&#39;s2&#39;&gt;&amp;quot;backbone&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;],&lt;/span&gt;
&lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;    &lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;          &lt;span class=&#39;nx&#39;&gt;Backbone&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;c1&#39;&gt;// Creates a new Backbone Model class object&lt;/span&gt;
    &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;LoginStatus&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;Backbone&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;Model&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;extend&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;({&lt;/span&gt;

        &lt;span class=&#39;nx&#39;&gt;defaults&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;nx&#39;&gt;logged_in&lt;/span&gt;   &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;false&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;},&lt;/span&gt;
        &lt;span class=&#39;nx&#39;&gt;initialize&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;});&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;LoginStatus&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As it stands, it just has a single attribute, ‘logged_in’ which reflects the logged in status of the user.&lt;/p&gt;

&lt;p&gt;In order to log in, we need a log-in form. When we are logged out, we will display a form to allow username and password to be entered, when we are logged in we can display a button to ‘log out’. Now this could be done by having a template and passing in the ‘logged_in’ status and having conditional code to display either one view or the other. I prefer keeping logic out of the template and putting it in the view so I created two templates.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;html&#39;&gt;&lt;span class=&#39;c&#39;&gt;&amp;lt;!-- app/templates/all/main/logged_out.html --&amp;gt;&lt;/span&gt;

&lt;span class=&#39;nt&#39;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;class=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class=&#39;nt&#39;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#39;nt&#39;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;type=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;placeholder=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;Username&amp;quot;&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;id=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class=&#39;nt&#39;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#39;nt&#39;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;type=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;placeholder=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;Password&amp;quot;&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;id=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class=&#39;nt&#39;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#39;nt&#39;&gt;&amp;lt;p&amp;gt;&amp;lt;button&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;id=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;login&amp;quot;&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;type=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;class=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;btn btn-default&amp;quot;&lt;/span&gt;&lt;span class=&#39;nt&#39;&gt;&amp;gt;&lt;/span&gt;Sign In&lt;span class=&#39;nt&#39;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class=&#39;nt&#39;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;id=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;lost_password&amp;quot;&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;href=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;/#/lost_password&amp;quot;&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;class=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;forgot&amp;quot;&lt;/span&gt;&lt;span class=&#39;nt&#39;&gt;&amp;gt;&lt;/span&gt;lost password?&lt;span class=&#39;nt&#39;&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&#39;nt&#39;&gt;&amp;lt;p&amp;gt;&amp;lt;button&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;id=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;register&amp;quot;&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;type=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;class=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;btn btn-default&amp;quot;&lt;/span&gt;&lt;span class=&#39;nt&#39;&gt;&amp;gt;&lt;/span&gt;Register&lt;span class=&#39;nt&#39;&gt;&amp;lt;/button&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&#39;nt&#39;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;html&#39;&gt;&lt;span class=&#39;c&#39;&gt;&amp;lt;!-- app/templates/all/main/logged_in.html --&amp;gt;&lt;/span&gt;

&lt;span class=&#39;nt&#39;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;class=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class=&#39;nt&#39;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#39;nt&#39;&gt;&amp;lt;p&amp;gt;&amp;lt;button&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;id=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;logout&amp;quot;&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;type=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class=&#39;na&#39;&gt;class=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;btn btn-default&amp;quot;&lt;/span&gt;&lt;span class=&#39;nt&#39;&gt;&amp;gt;&lt;/span&gt;Log Out&lt;span class=&#39;nt&#39;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&#39;nt&#39;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The decision on which one of these templates is displayed can now be delegated to the View.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;c&#39;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;app&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;views&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;dt&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;login_status&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;js&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;--&amp;gt;&lt;/span&gt;

&lt;span class=&#39;nx&#39;&gt;define&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;([&lt;/span&gt;    &lt;span class=&#39;s1&#39;&gt;&amp;#39;jquery&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;   &lt;span class=&#39;s1&#39;&gt;&amp;#39;hbs!templates/all/main/logged_in&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;  &lt;span class=&#39;s1&#39;&gt;&amp;#39;hbs!templates/all/main/logged_out&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;backbone&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;marionette&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;],&lt;/span&gt;
&lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;   &lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;          &lt;span class=&#39;nx&#39;&gt;template_logged_in&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;                 &lt;span class=&#39;nx&#39;&gt;template_logged_out&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;                &lt;span class=&#39;nx&#39;&gt;Backbone&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;c1&#39;&gt;//ItemView provides some default rendering logic&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;Backbone&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;Marionette&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;ItemView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;extend&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;({&lt;/span&gt;
        &lt;span class=&#39;nx&#39;&gt;render&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;model&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;get&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;logged_in&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;))&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
                &lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;el&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;).&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;empty&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;().&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;html&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;template_logged_in&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
            &lt;span class=&#39;k&#39;&gt;else&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
                &lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;el&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;).&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;empty&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;().&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;html&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;template_logged_out&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
        &lt;span class=&#39;nx&#39;&gt;initialize&lt;/span&gt;  &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;model&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;bind&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;change:logged_in&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;render&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;});&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As it stands, when the app starts, it will display the login form, since the logged_in attribute in the model defaults to false (which is what we want).&lt;/p&gt;

&lt;p&gt;Notice that the View binds to any change in the logged_in attribute of the Model. This is what I mean by separation of concerns. The View simply has to render the appropriate template whenever the logged_in status changes, it does not care &lt;em&gt;how&lt;/em&gt; it changes. Similarly all the Model has to do is maintain the status of the attribute and not care about how the View changes.&lt;/p&gt;

&lt;p&gt;Now, what should happen when we fill in the login form, username and password and click the ‘Log in’ button? Well, eventually it needs to send a message to the server and get the response, but again I am going to delegate that work to something other than the view.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;c&#39;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;app&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;views&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;dt&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;login_status&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;js&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;--&amp;gt;&lt;/span&gt;

    &lt;span class=&#39;p&#39;&gt;...&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;Backbone&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;Marionette&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;ItemView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;extend&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;({&lt;/span&gt;
        &lt;span class=&#39;nx&#39;&gt;render&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;...&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;},&lt;/span&gt;
        &lt;span class=&#39;nx&#39;&gt;events&lt;/span&gt;          &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;s1&#39;&gt;&amp;#39;click #login&amp;#39;&lt;/span&gt;          &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
            &lt;span class=&#39;s1&#39;&gt;&amp;#39;click #logout&amp;#39;&lt;/span&gt;         &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;logout&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;},&lt;/span&gt;
        &lt;span class=&#39;nx&#39;&gt;login&lt;/span&gt;   &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;username&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;#username&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;).&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;val&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
            &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;password&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;#password&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;).&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;val&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
            &lt;span class=&#39;nx&#39;&gt;Backbone&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;trigger&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s2&#39;&gt;&amp;quot;user:login&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;  &lt;span class=&#39;nx&#39;&gt;username&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;username&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;password&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;password&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;},&lt;/span&gt;
        &lt;span class=&#39;nx&#39;&gt;logout&lt;/span&gt;  &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;nx&#39;&gt;Backbone&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;trigger&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s2&#39;&gt;&amp;quot;user:logout&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;},&lt;/span&gt;


    &lt;span class=&#39;p&#39;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case I have bound the &lt;em&gt;click&lt;/em&gt; events for the &lt;em&gt;login&lt;/em&gt; and &lt;em&gt;logout&lt;/em&gt; buttons to similarly named methods. In those routines I have made use of the Backbone event handler to &lt;em&gt;trigger&lt;/em&gt; an event using the namespaces &lt;strong&gt;user:login&lt;/strong&gt; and &lt;strong&gt;user:logout&lt;/strong&gt; respectively. As far as the view is concerned, it does not matter how these events are handled, so long as there is something listening for those events. Indeed there can be more than one listener and all of them would be informed.&lt;/p&gt;

&lt;p&gt;And the listener? Well I decided to create a component that had the sole responsibility of co-ordinating communication with the server. Part of which is as follows. &lt;a href=&quot;http://lostechies.com/derickbailey/2012/04/19/decoupling-backbone-apps-from-websockets/&quot;&gt;This article on decoupling&lt;/a&gt; was the influence for the design.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;c1&#39;&gt;// app/components/lobby.js&lt;/span&gt;

&lt;span class=&#39;nx&#39;&gt;define&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;([&lt;/span&gt;    &lt;span class=&#39;s1&#39;&gt;&amp;#39;my-config&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;    &lt;span class=&#39;s1&#39;&gt;&amp;#39;jquery&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;    &lt;span class=&#39;s1&#39;&gt;&amp;#39;backbone&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;humane&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;  &lt;span class=&#39;s1&#39;&gt;&amp;#39;jquery.json&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;],&lt;/span&gt;
&lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;   &lt;span class=&#39;nx&#39;&gt;MyConfig&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;       &lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;           &lt;span class=&#39;nx&#39;&gt;Backbone&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;   &lt;span class=&#39;nx&#39;&gt;Humane&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;

    &lt;span class=&#39;c1&#39;&gt;// The Lobby is responsible for handling login and registration&lt;/span&gt;
    &lt;span class=&#39;c1&#39;&gt;//&lt;/span&gt;
    &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;Lobby&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;ws&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;

        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;nx&#39;&gt;init&lt;/span&gt;    &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
                &lt;span class=&#39;p&#39;&gt;...&lt;/span&gt;
                &lt;span class=&#39;c1&#39;&gt;// The user has logged in&lt;/span&gt;
                &lt;span class=&#39;nx&#39;&gt;Backbone&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;on&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s2&#39;&gt;&amp;quot;user:login&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;data&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
                    &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;msg&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
                        &lt;span class=&#39;nx&#39;&gt;route&lt;/span&gt;   &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;/lobby/login_with_password&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
                        &lt;span class=&#39;nx&#39;&gt;content&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
                            &lt;span class=&#39;nx&#39;&gt;password&lt;/span&gt;    &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;data&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;password&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
                            &lt;span class=&#39;nx&#39;&gt;username&lt;/span&gt;    &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;data&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;username&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
                            &lt;span class=&#39;nx&#39;&gt;client_code&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;client_code&lt;/span&gt;
                        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
                    &lt;span class=&#39;p&#39;&gt;};&lt;/span&gt;
                    &lt;span class=&#39;nx&#39;&gt;ws&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;send&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;JSON&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;stringify&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;msg&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;));&lt;/span&gt;
                &lt;span class=&#39;p&#39;&gt;});&lt;/span&gt;
                &lt;span class=&#39;c1&#39;&gt;// The user has logged out&lt;/span&gt;
                &lt;span class=&#39;nx&#39;&gt;Backbone&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;on&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s2&#39;&gt;&amp;quot;user:logout&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
                    &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;msg&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
                        &lt;span class=&#39;nx&#39;&gt;route&lt;/span&gt;   &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;/lobby/logout&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
                        &lt;span class=&#39;nx&#39;&gt;content&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
                            &lt;span class=&#39;nx&#39;&gt;client_code&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;client_code&lt;/span&gt;
                        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
                    &lt;span class=&#39;p&#39;&gt;};&lt;/span&gt;
                    &lt;span class=&#39;nx&#39;&gt;ws&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;send&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;JSON&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;stringify&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;msg&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;));&lt;/span&gt;
                &lt;span class=&#39;p&#39;&gt;});&lt;/span&gt;
                &lt;span class=&#39;p&#39;&gt;...&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;};&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;};&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;Lobby&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;ws&lt;/strong&gt; is a WebSocket object, the details of which I won’t go into, suffice to say that it has a &lt;strong&gt;send&lt;/strong&gt; method which sends a message to the server and an &lt;strong&gt;onmessage&lt;/strong&gt; method which accepts messages from the server.&lt;/p&gt;

&lt;p&gt;The two &lt;em&gt;Backbone.on&lt;/em&gt; methods are registering a callback function for each of the events &lt;strong&gt;user:login&lt;/strong&gt; and &lt;strong&gt;user:logout&lt;/strong&gt; that we saw earlier in the &lt;strong&gt;LoginStatus&lt;/strong&gt; view.&lt;/p&gt;

&lt;p&gt;We happen to be using Web Sockets to communicate with the server, but by decoupling the code in this way we would be free to change the communication with minimal change to the rest of the code.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;user:login&lt;/strong&gt; event results in a message to the server of &lt;strong&gt;/lobby/login_with_password&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All that remains now is to create an event on recept of the server confirming the receipt of the login or the logout messages, which put a &lt;strong&gt;ws:recv:/lobby/login_with_password&lt;/strong&gt; or a &lt;strong&gt;ws:recv:/logout&lt;/strong&gt; message on the Event Handler bus respectively.&lt;/p&gt;

&lt;p&gt;And what do we need to do when we receive confirmation? We need to change the state of the &lt;strong&gt;logged_in&lt;/strong&gt; attribute in the LoginStatus Model of course.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;    &lt;span class=&#39;c1&#39;&gt;// app/models/login_status.js&lt;/span&gt;

    &lt;span class=&#39;p&#39;&gt;...&lt;/span&gt;
    &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;LoginStatus&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;Backbone&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;Model&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;extend&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;({&lt;/span&gt;

        &lt;span class=&#39;p&#39;&gt;...&lt;/span&gt;
        &lt;span class=&#39;nx&#39;&gt;initialize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;nx&#39;&gt;Backbone&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;on&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s2&#39;&gt;&amp;quot;ws:recv:/lobby/login_with_password&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;login_success&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
            &lt;span class=&#39;nx&#39;&gt;Backbone&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;on&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s2&#39;&gt;&amp;quot;ws:recv:/lobby/logout&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;logout_success&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;},&lt;/span&gt;

        &lt;span class=&#39;nx&#39;&gt;logout_success&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;data&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;set&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;({&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;logged_in&amp;#39;&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;false&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;});&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;},&lt;/span&gt;

        &lt;span class=&#39;nx&#39;&gt;login_success&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;data&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;set&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;({&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;logged_in&amp;#39;&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;true&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;});&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;},&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which takes us full circle since we have already seen that when the &lt;strong&gt;logged_in&lt;/strong&gt; status changes it also triggers a change in the view.&lt;/p&gt;

&lt;p&gt;And although this might seem to be a convoluted and complex method to simply handle a single flag (logged_in) it really comes into it’s own with more complex examples, ensuring that each module has a simple, single thing to do. It also makes testing so much easier as well!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>About Battles</title>
   <link href="http://spacebotwar.com:4000/blog/2013/12/23/battles.html"/>
   <updated>2013-12-23T00:00:00+00:00</updated>
   <id>http://spacebotwar.com:4000/blog/2013/12/23/battles</id>
   <content type="html">&lt;p&gt;I explained how the core concept of SpaceBotWar was the ability to have computer programs compete against each other. I would like to expand a little on what this means in practice.&lt;/p&gt;

&lt;p&gt;In the early versions, each player will have an ‘ideal’ fleet of six ships. All ships will be the same, with the same characteristics, speed, turning speed, armaments, etc. The fleet of one player will compete against another, the only difference being the computer program controlling them.&lt;/p&gt;

&lt;p&gt;In a tournament, all computer programs in a league (of 30 programs) will be matched against all others. Most probably in a ‘best of three’ set, where each match will take up to five minutes.&lt;/p&gt;

&lt;p&gt;The playing area, or Arena, will be a grid (square or circular to be determined) within which the ships can move freely.&lt;/p&gt;

&lt;p&gt;At the start of the match, the ships will be positioned in set places, facing each other.&lt;/p&gt;

&lt;p&gt;The programs controlling each fleet will receive the initial position and speed (zero) of each teams ships and will respond with the instructions to follow at the start of the match (time zero). These instructions will allow the following commands to be given.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forward thrust rate&lt;/li&gt;

&lt;li&gt;Reverse thrust rate&lt;/li&gt;

&lt;li&gt;Sideway thrust rate&lt;/li&gt;

&lt;li&gt;Turning rate&lt;/li&gt;

&lt;li&gt;Missile launch and direction.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There will be standard limits for each of these parameters which will be enforced by the server. Any attempt to move outside the Arena will result in the ship stopping at the boundary.&lt;/p&gt;

&lt;p&gt;It will be a turn-based system. Every 500 milliseconds the server will give the latest known position, speed and direction for every ship and missile. Each program will need to respond with the new commands within the next 500 ms.&lt;/p&gt;

&lt;p&gt;There is no ‘random’ element, everything is controlled by the fleet programs and enforced by the server code. The server code also determines if missiles hit their target and will calculate damage.&lt;/p&gt;

&lt;p&gt;A win will be based on two factors.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An outright win, where one fleet is totally destroyed within the five minutes.&lt;/li&gt;

&lt;li&gt;A win based on the percentage damage to all ships at the end of five minutes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An outright win within the five minutes will give the winning program three points.&lt;/p&gt;

&lt;p&gt;A win based on the least damage at the end of five minutes will give the winning program one point.&lt;/p&gt;

&lt;p&gt;So, a program must be able to predict where an enemy ship will be at a future point in time, so that it’s missiles can intercept the enemy.&lt;/p&gt;

&lt;p&gt;It must also not be too predictable in it’s own movements else it will be destroyed by the enemy.&lt;/p&gt;

&lt;p&gt;Quite how programs will evolve, and what strategies develop, will be interesting to see.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>First Post</title>
   <link href="http://spacebotwar.com:4000/blog/2013/12/20/first-post.html"/>
   <updated>2013-12-20T00:00:00+00:00</updated>
   <id>http://spacebotwar.com:4000/blog/2013/12/20/first-post</id>
   <content type="html">&lt;p&gt;SpaceBotWar is a game that is influenced by many years of playing computer games several years of writing computer games, and more years than I care to admit to, creating software applications.&lt;/p&gt;

&lt;p&gt;The main influence for SpaceBotWar comes from a game call &lt;a href=&quot;http://en.wikipedia.org/wiki/Robotwar&quot;&gt;RobotWar&lt;/a&gt; which you will see was around nearly ten years before the Internet was ‘turned on’. In &lt;a href=&quot;http://en.wikipedia.org/wiki/Robotwar&quot;&gt;RobotWar&lt;/a&gt; you controlled the movements of your robot in an attempt to compete against other robots. Of course what was being tested here was the programming skill of the players.&lt;/p&gt;

&lt;p&gt;The concept for the full game is quite simple and has influence from many other on-line games, you build an empire, using resources that you collect or steal, you defend your base against attackers and you try to attack other players and Artificial Intelligence players in turn. In that respect it is not much different to many games out there such as &lt;a href=&quot;https://www.kixeye.com/game/vegaconflict&quot;&gt;Vega Conflict&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Consider this, if you happen to be away from keyboard (AFK) when you are attacked then you rely on the pre-programmed actions built into the game to do your defending for you. What if you were able to influence that defence, what if &lt;em&gt;you&lt;/em&gt; were able to write the code that controls your defence? What if you were able to write the code that determines how your spaceships move, how they dodge missiles, how they track down and work together to attack the enemy ships. That ability to program your empires actions is what SpaceBotWar is all about.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;So, I have a vision for the final game, a brief outline of which I have shared with you, I will expand on the ideas in later blogs. For now I would like to share my idea for an initial ‘alpha’ version of the game.&lt;/p&gt;

&lt;p&gt;The first version of the game will investigate the ability of players to control a fleet of space ships, say six ships. All ships will have the same characteristics, speed, turning speed, weapons. Players can enter their fleets into weekly tournaments where fleets compete against each other. These fleets being identical will only differ in their programming. What will be tested then in the tournaments will actually be the fitness of the programs.&lt;/p&gt;

&lt;p&gt;Each week the tournament will &lt;em&gt;rank&lt;/em&gt; these programs based on the outcome of their individual matches against each other.&lt;/p&gt;

&lt;p&gt;So Version 1 will have the following main features.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Players will be able to write control programs for their fleets&lt;/li&gt;

&lt;li&gt;Tournaments will be made up of many matches between pairs of fleets.&lt;/li&gt;

&lt;li&gt;The winners of a tournament will be the fleets (programs) which win the most matches.&lt;/li&gt;

&lt;li&gt;Matches will be run throughout the week on a schedule&lt;/li&gt;

&lt;li&gt;Anyone may watch, in real time, any match that is currently running.&lt;/li&gt;

&lt;li&gt;The Match will show the real-time movement of ships, missiles and blast damage.&lt;/li&gt;

&lt;li&gt;A league table will be presented to show the relative ranking of programs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition the following secondary features will be available.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Different languages will be available to program fleets, certainly Perl, Python, Ruby.&lt;/li&gt;

&lt;li&gt;Other languages may be added as they are implemented.&lt;/li&gt;

&lt;li&gt;Programs will be able to be edited on-line where they will be compiled, tested and debugged.&lt;/li&gt;

&lt;li&gt;Since programs will be ‘public-domain’ then anyone can clone an existing program and adapt and modify it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We aim to foster an environment where people can swap ideas and build on what other people have implemented.&lt;/p&gt;

&lt;p&gt;It is still early days, but we also hope to introduce a scheme to rate individuals based on how well their programs, or other programs which were based on them, are doing in the rating system. A form of ‘Qudos’ if you like. A recognition of programmers with the best skill. I will describe how I think this will work in a later Blog.&lt;/p&gt;</content>
 </entry>
 
 
</feed>
