=head1 INSTALLATION

These are some notes I have put together to help set up a test environment. They are by
no means complete, since things changed as I was building up the system and to give a 
complete set of instructions would mean I would have to clean everything down and start
again. Perhaps as people try this out they can add the detail?

=head2 TECHNOLOGY.

SpaceBotWar makes use of the following technologies.

=over

=item * Git

The code repository is at https://github.com/icydee/space-bot-war for the server code.
The Client code can be obtained from https://github.com/icydee/space-bot-war-client

=item * Perl

The server code is in Perl. Ideally you should be using a 'modern' version of Perl,
certainly 5.16 or later.

=item * perlbrew

Instead of changing your system Perl it is recommended you use a system to allow you
to have your own version of Perl, perlbrew is my recommendation. Or macport on the 
Apple Mac.

=item * jQuery

This is just mentioned here, this is the main Javascript framework used to develop
the client.

=item * Web Sockets

The web server is taking a departure from the 'normal' web frameworks which support
full stack web applications. Instead we are creating a web site that just supports
Web Sockets. This allows us to create a B<very> small footprint web server which is
very fast. This server also makes use of Plack and Twiggy (check the docs on cpan).

=item * Redis

Redis is a very fast name-value pair database which we are using primarily to hold
none critical data which is often used (e.g. session data) rather than hitting the
database frequently.

=item * MySQL

For persistent data we are storing this in MySQL. We use DBIx::Class Perl modules
as the ORM layer in the application.

=item * beanstalk

A number of message queues (or 'pipes' as beanstalk calls them) are set up for
inter-process communications. This allows us to delegate jobs which do not need
synchronous response (e.g. rather than various bits of code sending out email,
we just put a job on the 'email' pipe and let another process deal with all the
email sending). We will make a lot of use of pipes.

=back

=head3 Git

Installation of the code just requires a clone of the repository into your
local file system.

The root directory is not critical, but here is what I have done, both on a Mac
and in a Linux system.

Create a directory into which you can clone the repository, you will need write
access to this location. You may prefer to clone it into a directory in your
home directory but for the purpose of this document I will assume you are
installing into /data/space-bot-war

    $ cd /data
    $ git clone git@github.com:icydee/space-bot-war
    $ git clone git@github.com:icydee/space-bot-war-client

Preferably, you should 'fork' the repository on github and clone from there. In
which case of course you should change the above commands to point to your own
repo.

=head3 Perl

I will assume you are installing perlbrew. Instructions for this are at 
http:://perlbrew.pl

Once you have installed perlbrew, you can compile your own version of Perl and
run a local copy of Perl and all the tools (e.g. cpan). The code has been
developed on Perl 5.16

=head3 Redis

Download and install Redis from http://redis.io

There were a couple of extra steps I did on a Mac, I don't have the exact
details but something like copying the src/redis-server and src/redis-cli into
the /usr/bin directory.

=head3 MySQL

You should already have MySQL installed on your system, one point to note, 
when you build and deploy you need to make sure that you are using Innodb
tables. If you don't then many of the tests will fail (basically because if the
tables are created by the default MyISAM tables then transactions will fail
silently) If you see this sort of problem (on earlier versions of MySQL) you
should change the mysql config file to default to Innodb.

=head3 beanstalkd

You can obtain beanstalkd from http://kr.github.io/beanstalkd/download.html
with simple instructions to install on various system.s

=head2 DEVELOPMENT ENVIRONMENT

=head3 screen

I make my number one recommendation. Install and use the linux 'screen'
utility. It is a windows manager, so it allows you to run multiple screens
as if they were multiple SSH sessions into your server (or locally on a Mac).

The most important thing is, the sessions are persistent, so if you are on
a train (as I am now) or at work and you pack up for the day. You close your
SSH session and when you get home you restart where you left off. 

A good tutorial is at http://www.rackaid.com/resources/linux-screen-tutorial-and-how-to/

When using screen I have multiple windows open (they are numbered so you can
switch between them easily) I have the following setup.

Note that for development it is easier to run the various components from the
command line since this makes debugging easier. In production these would all be run
as system daemons.

Screen 0
========

This runs the web server for the Web Socket application.

  $ cd ~/space-bot-war/bin
  $ cp start_plack.sh.template start_plack.sh

Now edit the start_plack.sh file to change the port number. Each developer has their
own port. Currently.

  icydee 5001
  vasari 5002

You can start the web server with

  $ ./start_plack.sh

It will continue to show debug and connection details until you terminate it with
B<ctrl-c>

Note. Other services (such as redis or beanstalk may need to be run first)

This will produce a Web Socket API for each developer which can be found at

  ws://spacebotwar.co.uk:5001
  ws://spacebotwar.co.uk:5002


Screen 1
========

Reserved for beanstalk (not required yet)


Screen 2
========

The Redis server runs in this screen.

  $ cd ~/space-bot-war/bin
  $ cp start_redis.sh.template start_redis.sh

Edit start_redis.sh to change the port number. Each developer has their own port.
Currently

  icydee 7001
  vasari 7002

Screen 3
========

Node JS. This provides a web server that can be used to test, build and run the
SpaceBotWar web client. It is not strictly necessary to run this in NodeJS, for
example if you have your own web server, but it will be useful when we come to
build the final javascript code.

  $ cd ~/space-bot-war-client
  $ cp start_node.sh.template start_node.sh

Edit start_node.sh to change the port number. Each developer has their own port.
Currently.

  icydee 8001
  vasari 8002

The web server can be found for each developer at

  http://spacebotwar.co.uk:8001/index.html
  http://spacebotwar.co.uk:8002/index.html

Screen 4
========

It is useful to have the mysql client open to view the database.

  $ mysql -u sbw_icydee -p sbw_icydee
  password> sbw

Screen 5,6,7,8 etc.
==================

From now on it is down to personal preference. It can be useful to have screens open
to different directories depending upon what you are doing. If you do so consistently
it makes navigating between them much easier. Here are my preferences.

  5 a session open in the docs directory
  6 the t directory
  7 the lib directory.


=head3 coding standards

I am not going to get into long arguments about coding standards. I have used many
over the years and the one I use now seems to work for me (and many people). Based
on Damian Conway's book 'Perl Best Practices'. I will make the following points.

=over

=item Do not use tab characters.

No compromise on this one. Set your editor to replace tabs with spaces. There Must
Be No Tab Characters. It screws up layout royally.

=item Set a tab of 4 characters.

Each level of indentation should be 4 space characters (not tabs). The only
consession I will make is for HTML (B<not> Javascript which should still be 4 char)
which can use a tab setting of 2 characters due to the larger number of indent levels,
but even here tabs of 4 still make sense so I will review this again.

=item Everything else.

For everything else, look at existing code and try to follow the same style.

=back

=head3 Git branching.

There are a number of minor issues with github, mostly to do with merging in pull
requests. While there are a small number of developers it is not difficult to
manage the project. When it gets bigger we may have to expand this section.

The main points being.

=over

=item * Always pull --ff-only.

github has a habit of doing a merge when you merge from the site by clicking the
button on a pull request, even when a fast-forward merge would have worked. This
is the number one reason for a messy history. Ideally the history should show a
totally linear merge history.

=item * Rebase

If other changes have been made in the repository since you checked out, then you
may have to do a pull from the repository before you can merge your changes back
in. You should always do a pull --ff-only to check if there are any conflicts.

If you find a conflict, then you should rebase your own changes on top of the
changes in the repo to maintain the linear history.

=item * Development branch

Once we are in the state where we are making releases, then we should create a
B<develop> branch upon which all development takes place. The master branch 
should then just reflect the latest stable release. We will implement this as
and when necessary.

=back


