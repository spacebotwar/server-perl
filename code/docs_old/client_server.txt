Description of client-server code for spacebot control programs
===============================================================

When the server determines that a game should be run between one
fleet and another it determines a URL to call for each player.

The URL can either be on a server hosted by SpaceBot or an external
server hosted by the player. In either case the protocol is the
same.

For each player a URL is called, e.g. http://spacebotwar.com/remote/game
and parameters may be passed in, such as 'type' (the type of competition)
and 'enemy' (details about the enemy fleet) etc. A full list to be determined,
but it will include a 'nonce' which will allow a web socket to be set up.

This URL should respond with a 200 http code and immediately it should
make a http request to the URL http://spacebotwar.com/server/game with
the appropriate response (including the nonce). This connection should be
promoted into a Web Socket.

When both teams have responded, the server can commence the tournament.

If one server does not respond, the server falls back to a default setting,
running a local script, if both connetions fail the game is abandoned.

Once the two web-sockets are connected the game can start.

  * 10 seconds setup during which the ships cannot move.

  * 5 minutes game-play (perhaps 10 minutes) during which the server
  will report the current position and status of all ships and missiles
  every 500 ms.

  * For each status report, each player will receive a nonce, a single-use 
  token which they can use to respond to the game server within 400 ms. The 
  nonce will only be valid for this round (of 500 ms), after which the 
  response will be ignored.

  * For each player response, the server will retain the requested ship
  movements and use them to calculate the ships position at the next 500 ms
  clock 'tick'.

  * This will continue until either, one players ships are totally destroyed,
  or the game timer expires, in which case the player with the least damage wins.

  * Points will be awarded at the end of each game.

    * 3 points for the total destruction of all the opponents ships.
    * 1 point for the fleet with the least damage when the game timer expires.
    * No points will be awarded to the loser.

  * During the game, any web browser may make a web-socket connection and view
  the game in progress.

  * The game data will be preserved and stored (for a time period) for several
  purposes.

    * As a means of playing back the game so it can be viewed again.

    * As a means of allowing a player to 'debug' their program so they can
    (for example) single step through the game to fault find or check their
    code.

Server Status
=============

Server status will be sent every 500 ms and will include.

  * A 'nonce' a use-once token to identify the players response.
  * For each ship (own or enemy) each player will receive
    * ID
    * Owner ID
    * Name
    * Type
    * Health
    * Status
    * x position
    * y position
    * direction (in which the ship is moving, in radians)
    * speed (at which the ship is moving)
    * orientation (in which the ship is facing, in radians)
    * rotation (rate at which the ship is rotating, radians/sec)
  * For a players *own* ships only they will also receive
    * forward thrust (+ve only = forward)
    * sideways thrust (+ve = to port, -ve = to starboard)
    * reverse thrust (+ve only = backward)
    * max forward thrust
    * max sideway thrust
    * max reverse thrust
    * max rotation (absolute radians/sec)
  * For missiles
    * ID
    * Owner ID
    * Type
    * x position
    * y position
    * direction
    * speed
    * final x (i.e. the target location where it explodes)
    * final y

Notes:
  * Information about a ship, e.g. x, y, direction, speed are accurate at the
  time the information is received, i.e. at the start of the tick. However, this
  information may be updated (during the next 400ms) from the code servers. For
  this reason each player only ever knows the previous position and state of the
  opponent, not the future state.

  * Browsers which are displaying the current state of each ship should do so
  based on the known data, i.e. the data received at the start of each tick. For
  this reason the display of ships in a browser is by necessity lagging the 'actual'
  position of the ships by 500ms. This will not normally be a problem.

  * The reported 'speed' of a ship is computed based on the combined thrust, forward
  sideway or reverse. So a ship only having (say) 50 forward thrust (and zero reverse
  or sideway thrust) will have a forward speed of 50. When thrusters are combined 
  then the speed will be a vector of the components.

  * Likewise the 'direction' is calculated based on the vector of a ships thrust and
  it's current orientation. (a ship with only forward thrust will have a 'direction'
  equal to it's orientation, i.e it goes where it is pointed).

  * Once a server status is received, the player will have up to 400ms to compute
  their response and to send the reply. The Response will look like this.




